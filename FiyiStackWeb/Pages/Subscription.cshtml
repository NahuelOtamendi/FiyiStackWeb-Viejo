@page "/Subscription"
@using static FiyiStackWeb.Pages.CheckoutController;
@model SubscriptionModel
@{
    Layout = "_LayoutDashboard";
    ViewData["Title"] = "Subscriptions";
}

<div class="container mt-4">
    <h2>Subscription List</h2>
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Subscription ID</th>
                <th>Name</th>
                <th>Email</th>
                
                <th>Plan Name</th>
                <th>Status</th>
                <th>User ID</th>
                <th>Plan ID</th>
                <th>Start Date</th>
                <th>End Date</th>
             
                <th>Next Billing Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var subscription in Model.Subscriptions)
            {
                <tr class="@GetRowClass(subscription)">
                    <td>
                        @subscription.SubscriptionID
                        @if (IsNewSubscription(subscription.StartDate) && subscription.Status == "ACTIVE")
                        {
                            <span class="badge badge-success ml-2"> New</span>
                        }
                    </td>
                    <td>@subscription.Name</td>
                    <td>@subscription.Email</td>
                    <td>@subscription.PlanName</td>
                    <td>@subscription.Status</td>
                    <td>@subscription.UserID</td>
                   
                    <td>@subscription.PlanID</td>

                    <td>@subscription.StartDate</td>
                    <td>@subscription.EndDate</td>
                    
                    
                    <td>@subscription.NextBillingDate</td>
                 
                </tr>
            }
        </tbody>

    </table>
    <nav aria-label="Page navigation">
        <ul class="pagination">
            <li class="page-item prev @(Model.CurrentPage == 1 ? "disabled" : "")">
                <a class="page-link" href="#" data-page="@Model.CurrentPage - 1">&lt;</a>
            </li>
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                    <a class="page-link" href="#" data-page="@i">@i</a>
                </li>
            }
            <li class="page-item next @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                <a class="page-link" href="#" data-page="@Model.CurrentPage + 1">&gt;</a>
            </li>
        </ul>
    </nav>
</div>
<style>
    .bg-danger {
        background-color: #ff99ad !important;
    }

    .page-item {
        padding:10px;
        margin:1px;
    }
</style>
<script>
    // Function to update pagination links based on the URL
    function updatePaginationLinksFromURL() {
        const currentPage = parseInt(getQueryParam('page')) || 1;
        const totalPages = @Model.TotalPages; // Replace with actual TotalPages value

        const paginationLinks = document.querySelectorAll('.pagination a.page-link');

        paginationLinks.forEach(link => {
            const pageNumber = parseInt(link.getAttribute('data-page'));
            if (pageNumber === currentPage) {
                link.parentElement.classList.add('active');
            } else {
                link.parentElement.classList.remove('active');
            }
        });

        // Enable/disable "Previous" and "Next" buttons
        const prevButton = document.querySelector('.pagination .prev');
        const nextButton = document.querySelector('.pagination .next');

        if (currentPage === 1) {
            prevButton.classList.add('disabled');
        } else {
            prevButton.classList.remove('disabled');
        }

        if (currentPage === totalPages) {
            nextButton.classList.add('disabled');
        } else {
            nextButton.classList.remove('disabled');
        }
    }

    // Helper function to get query parameter from URL
    function getQueryParam(param) {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(param);
    }

    // Attach click event listeners to pagination links
    document.addEventListener('DOMContentLoaded', () => {
        updatePaginationLinksFromURL();

        const paginationLinks = document.querySelectorAll('.pagination a.page-link');
        const prevButton = document.querySelector('.pagination .prev');
        const nextButton = document.querySelector('.pagination .next');

        paginationLinks.forEach(link => {
            link.addEventListener('click', event => {
                event.preventDefault();
                const newPage = parseInt(link.getAttribute('data-page'));
                const queryParams = new URLSearchParams(window.location.search);
                queryParams.set('page', newPage);
                window.location.search = queryParams.toString();
            });
        });

        prevButton.addEventListener('click', event => {
            event.preventDefault();
            const currentPage = parseInt(getQueryParam('page')) || 1;
            if (currentPage > 1) {
                const queryParams = new URLSearchParams(window.location.search);
                queryParams.set('page', currentPage - 1);
                window.location.search = queryParams.toString();
            }
        });

        nextButton.addEventListener('click', event => {
            event.preventDefault();
            const currentPage = parseInt(getQueryParam('page')) || 1;
            const totalPages = @Model.TotalPages; // Replace with actual TotalPages value
            if (currentPage < totalPages) {
                const queryParams = new URLSearchParams(window.location.search);
                queryParams.set('page', currentPage + 1);
                window.location.search = queryParams.toString();
            }
        });
    });
</script>




@functions {
    string GetRowClass(Subscription subscription)
    {
        if (subscription.Status == "Ended" || subscription.Status == "Suspended" || subscription.Status == "Cancelled" || subscription.EndDate != null && subscription.EndDate <= DateTime.Now)
        {
            return "bg-danger";
        }
        return "";
    }

}
@functions {
    bool IsNewSubscription(DateTime startDate)
    {
        TimeSpan timeSinceSubscription = DateTime.Now - startDate;
        return timeSinceSubscription.TotalHours >= 0 && timeSinceSubscription.TotalHours <= 48.00;
    }
}